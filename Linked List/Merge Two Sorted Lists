Problem Description : https://leetcode.com/problems/merge-two-sorted-lists/

Recursive Approach 
Time Complexity : O(m+n)
Space Complexity : O(m+n)

class Solution {
public:
     ListNode* merge(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)return l2; 
        if(l2 == NULL)return l1; 
        
         if(l1->val <= l2->val){
          l1->next = merge(l1->next,l2);
          return l1;
        }
        else{
            l2->next = merge(l2->next,l1);
            return l2;
        }
    
     }  
    
    
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        return merge(list1,list2);

    }
};

Iterative Approach 
Time Complexity : O(m+n)
Space Complexity : O(1)

class Solution {
public:
       
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL)return list2;
        if(list2 == NULL)return list1;
        ListNode* dummy = new ListNode(-1);
        ListNode* tail = dummy;
        while(list1 != NULL && list2!=NULL){
            if(list1->val <= list2->val){
                tail->next = list1;
                tail = list1;
                list1 = list1->next;
            }
            else{
                tail->next = list2;
                tail = list2;
                list2 = list2->next;
            }
        }
        if(list1 == NULL)tail->next = list2;
        if(list2 == NULL)tail->next = list1;
        return dummy->next;

    }
};
