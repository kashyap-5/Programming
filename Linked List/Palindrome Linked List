Problem Description : https://leetcode.com/problems/palindrome-linked-list/
Time Complexity : O(N)
)Space Complexity :O(1) 

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL){
            return true;
        }
        ListNode *h1 = head,*h2 = NULL;
        ListNode *slow = head,*fast = head;
        while(fast->next != NULL && fast->next->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        ListNode *mid = slow;
        h2 = slow->next;
        mid->next = NULL;
        
        ListNode *prev = NULL , *cur = h2, *nex = h2;
        while(cur != NULL){
            nex = cur->next;
            cur->next = prev;
            prev = cur;
            cur = nex;
        }
        ListNode *newHead = prev;
        while(h1 != NULL  && newHead != NULL){
            if(h1->val != newHead->val){
                break;
            }
            h1 = h1->next;
            newHead = newHead->next;
        }
        
        if((h1 == NULL || h1->next == NULL) && newHead == NULL){
            return true;
        }
          
        return false;
        }
        
    
};
